import sys
from pathlib import Path

# Adicione esta linha ANTES de qualquer import
sys.path.insert(0, str(Path(__file__).parent.parent.parent))  # Ajuste crucial!


# 2. Bibliotecas externas
import streamlit as st
from streamlit_folium import folium_static 
import pandas as pd
import numpy as np
import geopandas as gpd
import plotly.express as px 
import plotly.graph_objects as go
from sklearn.preprocessing import LabelEncoder

# 3. M√≥dulos internos
from eco_guardian.dashboard.components.data_filter_panel import data_filter_panel
from eco_guardian.models import llm_policy, time_series_model
from eco_guardian.utils import data_loader
from eco_guardian.dashboard.components import maps, charts, landuse_viz
from eco_guardian.dashboard.components import landuse_sidebar
from eco_guardian.dashboard.components.geo import geo_filters
from eco_guardian.dashboard.components import policy_dashboard
from eco_guardian.models.time_series_model import UnifiedForecaster

# Atalhos para classes/fun√ß√µes usadas frequentemente
PolicyAnalyzer = llm_policy.PolicyAnalyzer
load_processed_data = data_loader.load_processed_data
GeoFilter = geo_filters.GeoFilter

# ===================================
# CONFIGURA√á√ïES FORMATA√á√ÉO NUMEROS
# ===================================
def formatar_br(valor):
    """Formata n√∫meros no padr√£o brasileiro com separadores de milhar"""
    return f"{valor:,.0f}".replace(",", "X").replace(".", ",").replace("X", ".")

def formatar_campos_futebol(valor):
    """Formata o n√∫mero de campos de futebol de forma inteligente"""
    valor = abs(valor)  # Garante que seja positivo para a formata√ß√£o
    
    if valor >= 1_000_000:
        return f"{valor/1_000_000:,.1f} milh√µes".replace(",", "X").replace(".", ",").replace("X", ".")
    elif valor >= 1_000:
        return f"{valor/1_000:,.1f} mil".replace(",", "X").replace(".", ",").replace("X", ".")
    return formatar_br(valor)

# ======================
# CONFIGURA√á√ïES DA P√ÅGINA
# ======================
def configure_page():
    """Configura√ß√µes iniciais da p√°gina"""
    st.set_page_config(
        page_title="EcoGuardian - Monitoramento Ambiental",
        layout="wide",
        page_icon="üå≥"
    )
    st.markdown("""
        <style>
            .main {padding: 2rem 3rem;}
            .stAlert {padding: 20px;}
            .stTabs [data-baseweb="tab-list"] {
                gap: 10px;
            }
            .metric-box {border: 1px solid #e6e6e6; border-radius: 8px; padding: 1rem;}
        </style>
    """, unsafe_allow_html=True)

# ======================
# COMPONENTES PRINCIPAIS
# ======================
def policy_analysis_section():
    """Se√ß√£o de an√°lise de pol√≠ticas com IA"""
    analyzer = PolicyAnalyzer()
    with st.expander("üîç An√°lise de Pol√≠ticas Ambientais com IA", expanded=True):
        uploaded_file = st.file_uploader(
            "Carregue documento de pol√≠tica ambiental (PDF)",
            type="pdf",
            key="policy_upload"
        )
        
        if uploaded_file:
            with st.spinner("Analisando documento..."):
                try:
                    analysis = analyzer.analyze_policy(uploaded_file.read())
                    st.success("An√°lise conclu√≠da!")
                    st.markdown(f"**Insights do documento:**\n\n{analysis}")
                except Exception as e:
                    st.error(f"Erro na an√°lise: {str(e)}")

def data_filter_panel():
    """Painel lateral para filtros hier√°rquicos flex√≠veis"""
    
    default_filters = {
        "mapa_nacional": {
            "year": 2023,
            "biomas": [],
            "estados": [],
            "municipios": [],
            "prodes_data": None,
            "map_data": None
        },
        "landuse_filters": {
            "biomas": [],
            "estados": [],
            "municipios": [],
            "ano_inicio": 2010,
            "ano_fim": 2023,
            "show_diff": True
        }
    }

    with st.sidebar:
        st.header("üå≥ Filtros de An√°lise")
        
        try:
            # Carrega dados com cache
            @st.cache_data
            def load_filter_data():
                prodes = load_processed_data('prodes')
                municipios = load_processed_data('br_municipios')
                landuse = load_processed_data('landuse_processed')

                # Garantir que n√£o h√° None em colunas cr√≠ticas
                prodes['bioma'] = prodes['bioma'].fillna('N√£o informado')
                municipios['NM_UF'] = municipios['NM_UF'].fillna('Estado n√£o identificado')
                municipios['NM_MUN'] = municipios['NM_MUN'].fillna('Munic√≠pio n√£o identificado')
                
                # Criar rela√ß√£o est√°vel munic√≠pio-bioma para o mapa
                relacao_biomas = prodes.groupby('cd_municipio').agg(
                    bioma=('bioma', lambda x: x.mode()[0] if not x.mode().empty else 'N√£o informado')
                ).reset_index()

                # Converter explicitamente None para 'N√£o informado'
                relacao_biomas['bioma'] = relacao_biomas['bioma'].apply(
                    lambda x: 'N√£o informado' if x is None else x
                )

                # Ap√≥s o merge, garantir substitui√ß√£o de NaN e None
                merged_mapa = municipios.merge(
                    relacao_biomas,
                    on='cd_municipio',
                    how='left'
                ).fillna({
                    'bioma': 'N√£o informado',
                    'NM_UF': 'Estado n√£o identificado',
                    'NM_MUN': 'Munic√≠pio n√£o identificado'
                })
                
                # Garantir substitui√ß√£o de NaN e None na coluna final
                merged_mapa['bioma'] = merged_mapa['bioma'].apply(
                    lambda x: 'N√£o informado' if x is None else x
                )
                return {
                    'prodes': prodes,
                    'landuse': landuse,
                    'map_data': merged_mapa
                }
                
            data = load_filter_data()
            
            # Tabs principais com keys √∫nicas
            tab_mapa, tab_landuse = st.tabs(["Mapa Nacional", "Cobertura Vegetal"])
            
            with tab_mapa:
                st.markdown("**Filtros para o Mapa**")
                
                # Filtro de ano para o mapa
                min_year = int(data['prodes']['ano'].min())
                max_year = int(data['prodes']['ano'].max())
                selected_year = st.selectbox(
                    "Ano de refer√™ncia",
                    options=sorted(data['prodes']['ano'].unique(), reverse=True),
                    index=0,
                    key='map_year_unique'
                )
                
                # Filtros hier√°rquicos para o mapa
                biomas_mapa = sorted([
                    str(b) for b in data['map_data']['bioma'].unique() 
                    if b not in [None, 'N√£o informado']
                ], key=str.lower)
                
                selected_biomas_mapa = st.multiselect(
                    "Biomas para realce",
                    options=biomas_mapa,
                    default=["Amaz√¥nia"] if "Amaz√¥nia" in biomas_mapa else [],
                    key='map_biomas_unique'
                )

                # Estados dispon√≠veis baseados nos biomas selecionados
                estados_base = data['map_data'][data['map_data']['NM_UF'].notna()]
                estados_disponiveis_mapa = sorted(
                    estados_base['NM_UF'].unique(), 
                    key=str.lower
                )
                
                selected_estados_mapa = st.multiselect(
                    "Estados para realce",
                    options=estados_disponiveis_mapa,
                    default=[],
                    key='map_estados_unique'
                )
                
                # Munic√≠pios dispon√≠veis baseados nos filtros anteriores
                municipios_base = data['map_data'][data['map_data']['NM_MUN'].notna()]
                if selected_estados_mapa:
                    municipios_disponiveis_mapa = sorted(
                        municipios_base[
                            municipios_base['NM_UF'].isin(selected_estados_mapa)
                        ]['NM_MUN'].unique(),
                        key=str.lower
                    )
                else:
                    municipios_disponiveis_mapa = sorted(
                        municipios_base['NM_MUN'].unique(),
                        key=str.lower
                    )
                
                selected_municipios_mapa = st.multiselect(
                    "Munic√≠pios para realce",
                    options=municipios_disponiveis_mapa,
                    default=[],
                    key='map_municipios_unique'
                )
  
            with tab_landuse:
                st.markdown("**Filtros de Cobertura Vegetal**")
                
                # Dados espec√≠ficos para landuse
                landuse_data = data['landuse'].copy()
                
                # Filtros independentes para landuse
                biomas_landuse = sorted(landuse_data['bioma'].unique())
                selected_biomas_landuse = st.multiselect(
                    "Biomas",
                    options=biomas_landuse,
                    default=[],
                    key='landuse_biomas_unique',
                    help="Selecione um ou mais biomas"
                )
  
                # Estados dispon√≠veis baseados nos biomas selecionados
                estados_disponiveis_landuse = sorted(
                    landuse_data[landuse_data['bioma'].isin(selected_biomas_landuse)]['Estado'].unique() 
                    if selected_biomas_landuse 
                    else landuse_data['Estado'].unique()
                )
                selected_estados_landuse = st.multiselect(
                    "Estados",
                    options=estados_disponiveis_landuse,
                    default=[],
                    key='landuse_estados_unique',
                    help="Selecione um ou mais estados"
                )
        
                # Munic√≠pios dispon√≠veis baseados nos filtros anteriores
                municipios_query = []
                if selected_biomas_landuse:
                    municipios_query.append(f"bioma in {selected_biomas_landuse}")
                if selected_estados_landuse:
                    municipios_query.append(f"Estado in {selected_estados_landuse}")
                
                municipios_disponiveis_landuse = sorted(
                    landuse_data.query(" & ".join(municipios_query))['dc_municipio'].unique() 
                    if municipios_query 
                    else landuse_data['dc_municipio'].unique()
                )
                selected_municipios_landuse = st.multiselect(
                    "Munic√≠pios",
                    options=municipios_disponiveis_landuse,
                    default=[],
                    key='landuse_municipios_unique',
                    help="Selecione um ou mais munic√≠pios"
                )
             
                # Per√≠odo temporal
                if pd.api.types.is_datetime64_any_dtype(landuse_data['ano']):
                    landuse_data['ano'] = landuse_data['ano'].dt.year
                
                min_year_landuse = int(landuse_data['ano'].min())
                max_year_landuse = int(landuse_data['ano'].max())
                landuse_years = st.slider(
                    "Per√≠odo de An√°lise",
                    min_value=min_year_landuse,
                    max_value=max_year_landuse,
                    value=(1990, 2023),
                    key='landuse_years_unique'
                )
                
                show_diff = st.checkbox(
                    "Mostrar diferen√ßas anuais", 
                    True, 
                    key='landuse_show_diff_unique'
                )
            
            return {
                "mapa_nacional": {
                    'year': int(selected_year),
                    'biomas': [str(b) for b in selected_biomas_mapa if b not in [None, 'N√£o informado']],
                    'estados': [str(e) for e in selected_estados_mapa if e is not None],
                    'municipios': [str(m) for m in selected_municipios_mapa if m is not None],
                    'prodes_data': data['prodes'],
                    'map_data': data['map_data']
                },
                "landuse_filters": {
                    'biomas': [str(b) for b in selected_biomas_landuse if b is not None],
                    'estados': [str(e) for e in selected_estados_landuse if e is not None],
                    'municipios': [str(m) for m in selected_municipios_landuse if m is not None],
                    'ano_inicio': int(landuse_years[0]),
                    'ano_fim': int(landuse_years[1]),
                    'show_diff': bool(show_diff)
                }
            }
            
        except Exception as e:
            st.error(f"Erro ao carregar filtros: {str(e)}")
            return default_filters

# ======================
# SERVI√áO DE PROJE√á√ÉO
# ======================
class ProjectionService:
    @staticmethod
    @st.cache_data
    def load_projection_data():
        """Carrega dados j√° no formato agrupado correto, com compatibilidade para 'taxa_conversao_anual'"""
        df = load_processed_data('landuse_processed')
        
        # Dicion√°rio de bioma predominante por estado (j√° existente na classe)
        ESTADO_BIOMA = {
            'Acre': 'Amaz√¥nia',
            'Alagoas': 'Caatinga',
            'Amap√°': 'Amaz√¥nia',
            'Amazonas': 'Amaz√¥nia',
            'Bahia': 'Caatinga',
            'Cear√°': 'Caatinga',
            'Distrito Federal': 'Cerrado',
            'Esp√≠rito Santo': 'Mata Atl√¢ntica',
            'Goi√°s': 'Cerrado',
            'Maranh√£o': 'Cerrado',
            'Mato Grosso': 'Amaz√¥nia',
            'Mato Grosso do Sul': 'Cerrado',
            'Minas Gerais': 'Cerrado',
            'Par√°': 'Amaz√¥nia',
            'Para√≠ba': 'Caatinga',
            'Paran√°': 'Mata Atl√¢ntica',
            'Pernambuco': 'Caatinga',
            'Piau√≠': 'Caatinga',
            'Rio de Janeiro': 'Mata Atl√¢ntica',
            'Rio Grande do Norte': 'Caatinga',
            'Rio Grande do Sul': 'Pampa',
            'Rond√¥nia': 'Amaz√¥nia',
            'Roraima': 'Amaz√¥nia',
            'Santa Catarina': 'Mata Atl√¢ntica',
            'S√£o Paulo': 'Cerrado',
            'Sergipe': 'Caatinga',
            'Tocantins': 'Amaz√¥nia'
        }

        # Filtra apenas os registros do bioma predominante de cada estado
        df['bioma_predominante'] = df['Estado'].map(ESTADO_BIOMA)
        df = df[df['bioma'] == df['bioma_predominante']]
        
        # Garante que 'y' existe, usando 'taxa_conversao_anual' se necess√°rio
        if 'y' not in df.columns:
            df['y'] = df['taxa_conversao_anual'] 
        
        # Renomeia coluna de data
        df = df.rename(columns={'ano': 'ds'})
        
        # Agrega por estado e ano (agora s√≥ ter√° um registro por estado/ano)
        df = df.groupby(['Estado', 'ds', 'bioma']).agg({
            'area_fazenda_ha': 'sum',
            'area_floresta_ha': 'sum',
            'y': lambda x: np.average(x, weights=df.loc[x.index, 'area_floresta_ha'])
        }).reset_index()
        
        df['ds'] = pd.to_datetime(df['ds'], format='%Y')
        return df

    @staticmethod
    def generate_state_projection(estado_selecionado, anos_projecao):
        try:
            # Mapeamento de siglas dos estados
            SIGLAS_ESTADOS = {
                'Acre': 'AC', 'Alagoas': 'AL', 'Amap√°': 'AP', 'Amazonas': 'AM',
                'Bahia': 'BA', 'Cear√°': 'CE', 'Distrito Federal': 'DF', 'Esp√≠rito Santo': 'ES',
                'Goi√°s': 'GO', 'Maranh√£o': 'MA', 'Mato Grosso': 'MT', 'Mato Grosso do Sul': 'MS',
                'Minas Gerais': 'MG', 'Par√°': 'PA', 'Para√≠ba': 'PB', 'Paran√°': 'PR',
                'Pernambuco': 'PE', 'Piau√≠': 'PI', 'Rio de Janeiro': 'RJ', 'Rio Grande do Norte': 'RN',
                'Rio Grande do Sul': 'RS', 'Rond√¥nia': 'RO', 'Roraima': 'RR',
                'Santa Catarina': 'SC', 'S√£o Paulo': 'SP', 'Sergipe': 'SE', 'Tocantins': 'TO'
            }

            # Obt√©m a sigla do estado selecionado
            sigla = SIGLAS_ESTADOS.get(estado_selecionado)
            if not sigla:
                raise ValueError(f"Sigla n√£o encontrada para o estado: {estado_selecionado}")

            # Carrega e prepara os dados hist√≥ricos
            df_historico = ProjectionService.load_projection_data()
            df_estado = df_historico[df_historico['Estado'] == estado_selecionado]

            if df_estado.empty:
                raise ValueError(f"Nenhum dado dispon√≠vel para {estado_selecionado}")

            ultimo_ano = df_estado.iloc[-1]
            
            # Calcula a propor√ß√£o de floresta
            total_area = ultimo_ano['area_fazenda_ha'] + ultimo_ano['area_floresta_ha']
            prop_floresta = ultimo_ano['area_floresta_ha'] / total_area if total_area > 0 else 0.0

            # Prepara as condi√ß√µes iniciais
            condicoes = {
                'Estado': estado_selecionado,
                'bioma': ultimo_ano['bioma'],
                'area_fazenda_ha': float(ultimo_ano['area_fazenda_ha']),
                'area_floresta_ha': float(ultimo_ano['area_floresta_ha']),
                'y': float(ultimo_ano['y']),
                'prop_floresta': float(prop_floresta),
                'last_year': int(df_estado['ds'].dt.year.iloc[-1]), 
                'estado_code': int(forecaster.encoder_estados.transform([estado_selecionado])[0]) 
 
            } 

            # Carrega o modelo e codifica o estado
            model_path = Path(f"eco_guardian/models/saved_models/unified_prophet_v4_{sigla}.pkl")
            if not model_path.exists():
                raise FileNotFoundError(f"Modelo para {estado_selecionado} n√£o encontrado em: {model_path}")

            forecaster = UnifiedForecaster.load_model(model_path)
            condicoes['estado_code'] = int(forecaster.encoder_estados.transform([estado_selecionado])[0])

            # Gera a previs√£o
            forecast = forecaster.predict(condicoes, anos_projecao)
            
            return {
                'forecast': forecast,
                'historical_data': df_estado,
                'initial_conditions': condicoes
            }
            
        except Exception as e:
            st.error(f"Erro na proje√ß√£o: {str(e)}")
            return None

    def render_projection_results(result, anos_projecao):
        """Renderiza gr√°ficos e m√©tricas dos resultados com fontes aumentadas"""
        if not result:
            return
            
        forecast = result['forecast']
        df_estado = result['historical_data']
        condicoes = result['initial_conditions']
        
        # Garante que o √∫ltimo ano hist√≥rico seja igual ao primeiro ano projetado
        last_historical_year = df_estado['ds'].max()
        first_proj_year = forecast['data'].min()
        
        if last_historical_year != first_proj_year:
            transition_point = pd.DataFrame({
                'data': [last_historical_year],
                'conversao_ha_prevista': [df_estado['y'].iloc[-1]],
                'Estado': [condicoes['Estado']],
                'bioma': [condicoes['bioma']]
            })
            forecast = pd.concat([transition_point, forecast], ignore_index=True)

        # ========== CONFIGURA√á√ÉO DO GR√ÅFICO COM FONTES AUMENTADAS ==========
        fig = go.Figure()
        
        # Linha de equil√≠brio (0%)
        fig.add_hline(
            y=0, 
            line_dash="dot", 
            line_color="rgba(255, 0, 0, 0.7)",  # Vermelho com 70% de opacidade
            annotation_text="Linha de equil√≠brio (0%)", 
            annotation_position="bottom right",
            annotation_font=dict(
                size=10, 
                color="white"  # Texto em branco (ou use "rgb(255,255,255)")
            ),
            line_width=1.5
        )
        
        # Dados hist√≥ricos
        fig.add_trace(go.Scatter(
            x=df_estado['ds'], 
            y=df_estado['y'],
            name="Hist√≥rico",
            line=dict(color='blue', width=3),
            mode='lines+markers',
            marker=dict(size=8),
            hovertemplate='<b>Ano</b>: %{x|%Y}<br><b>Taxa</b>: %{y:.2%}<extra></extra>'
        ))
        
        # Proje√ß√£o
        fig.add_trace(go.Scatter(
            x=forecast['data'],
            y=forecast['conversao_ha_prevista'],
            name="Previs√£o",
            line=dict(color='orange', width=3, dash='dot'),
            mode='lines+markers',
            marker=dict(size=8),
            hovertemplate='<b>Ano</b>: %{x|%Y}<br><b>Previs√£o</b>: %{y:.2%}<extra></extra>'
        ))
        
        # Layout com fontes aumentadas
        fig.update_layout(
            plot_bgcolor='rgba(0,0,0,0)',  # Fundo do gr√°fico
            paper_bgcolor='rgba(0,0,0,0)', # √Årea externa do gr√°fico
            font=dict(color='white'), # Cor padr√£o do texto

            title={
                'text': f"<b>Proje√ß√£o para {condicoes['Estado']}</b>",
                'font': {'size': 22, 'family': "Arial, sans-serif"},
                'x': 0.5,
                'xanchor': 'center'
            },
            xaxis={
                'title': '<b>Ano</b>',
                'title_font': {'size': 18},
                'tickfont': {'size': 14},
                'gridcolor': 'rgba(255, 255, 255, 0.5)',  # Branco com 10% de opacidade
            },
            yaxis={
                'title': 'Taxa de Evolu√ß√£o Cobertura Florestal (%)',
                'title_font': {'size': 12},
                'tickfont': {'size': 12},
                'tickformat': '.2%',
                'gridcolor': 'rgba(255, 255, 255, 0.5)'
            },
            legend={
            'font': {'size': 12, 'color': 'white'},
            'orientation': 'h',
            'y': -0.2,
            'bgcolor': 'rgba(0,0,0,0)'
            },
        
            hoverlabel={
                'font': {'size': 14},
                'bgcolor': 'rgba(40, 40, 40, 0.9)',
                'bordercolor': 'white'
            }
        )

        st.plotly_chart(fig, use_container_width=True)
        
        # ========== M√âTRICAS ==========
        col1, col2, col3, col4 = st.columns(4)
        variacao = forecast['conversao_ha_prevista'].iloc[-1] - df_estado['y'].iloc[-1]
        area_perdida = condicoes['area_floresta_ha'] * abs(variacao)
        
        with col1:
            st.metric("Bioma", condicoes['bioma'])
        with col2:
            st.metric("√öltima Taxa Registrada", f"{df_estado['y'].iloc[-1]:.2%}")
        with col3:
            st.metric("Varia√ß√£o Projetada", f"{variacao:+.2%}", delta_color="inverse")
        with col4:
            st.metric(
                "√Årea Florestal Afetada", 
                f"{formatar_br(abs(area_perdida))} ha", 
                help="√Årea projetada de perda/ganho at√© o final da proje√ß√£o"
            )

        # ========== INTERPRETA√á√ÉO COM FONTE AUMENTADA ==========
        area_perdida_abs = abs(area_perdida)
        campos_futebol = area_perdida_abs / 1.08
        
        st.markdown(
            f"""
            <div style='font-size: 16px; line-height: 1.6; margin-top: 10px;'>
            <b>üå≥ Interpreta√ß√£o:</b> Uma varia√ß√£o de {variacao:+.2%} significa que, em {anos_projecao} anos,
            a cobertura florestal de {condicoes['Estado']} poder√° {'diminuir ‚¨áÔ∏è' if variacao < 0 else 'aumentar ‚¨ÜÔ∏è'}
            em aproximadamente <b>{formatar_br(area_perdida_abs)} hectares</b> 
            (‚öΩ equivalente a <b>{formatar_campos_futebol(campos_futebol)} campos de futebol</b>).
            <br><br>
            <span style='font-size: 14px;'>
            *Considerando 1 campo de futebol padr√£o = 1,08 hectare (108m √ó 68m)*
            </span>
            </div>
            """, 
            unsafe_allow_html=True
        )
# ======================
# FUN√á√ÉO PRINCIPAL
# ======================
def main():
    configure_page()
    filters = data_filter_panel()
    
    st.title("üåç EcoGuardian - Painel Nacional de Monitoramento")
    
    tab1, tab4, tab2, tab3 = st.tabs([
        "Mapa Nacional",
        "Cobertura Vegetal",
        "Indicadores Econ√¥micos", 
        "An√°lise Pol√≠tica"
    ])

    with tab1:
        with st.container():
            st.header("Mapa Nacional de Desmatamento por Bioma")
            
            # Usa os filtros j√° carregados
            mapa_filters = filters['mapa_nacional']

            # Container para o mapa e m√©tricas
            map_col, metrics_col = st.columns([4, 1])
            
            with map_col:
                try:
                    # Carrega os dados necess√°rios (j√° carregados nos filtros)
                    prodes_data = mapa_filters['prodes_data']
                    municipios_data = mapa_filters['map_data']
                    selected_year = mapa_filters['year']
                    
                    # Container para o mapa (fixo para anima√ß√£o)
                    map_container = st.empty()

                    # Cria e exibe o mapa inicial com Folium e filtros
                    m = maps.render_br_map_folium(
                        year=selected_year,
                        selected_biomas=mapa_filters['biomas'],
                        selected_estados=mapa_filters['estados'],
                        selected_municipios=mapa_filters['municipios'],
                        prodes_data=prodes_data,
                        municipios_data=municipios_data
                    )
                    
                    if m:
                        with map_container:
                            folium_static(m, height=1100, width=1100)

                except Exception as e:
                    st.error(f"Erro ao carregar o mapa: {str(e)}")

            with metrics_col:
                # Container principal
                st.markdown("""
                    <div style="margin-bottom: 10px;">
                        <h4 style='font-size: 18px; margin-bottom: 4px;'>üìä Desmatamento Acumulado por Bioma</h4>
                        <div class="tooltip" style="margin-bottom: 8px;">
                            <small>‚ÑπÔ∏è Legenda dos Indicadores</small>
                            <span class="tooltiptext">
                                <div style="text-align: left; line-height: 1.4; padding: 8px;">
                                    <strong style="color: #FF4B4B;">‚ñ≤ + Valor:</strong> Aumento no desmatamento<br>
                                    <strong style="color: #0F9D58;">‚ñ≤ - Valor:</strong> Redu√ß√£o no desmatamento<br><br>
                                    <strong style="color: #FF4B4B;">‚òÖ + Valor:</strong> Acelera√ß√£o da tend√™ncia<br>
                                    <strong style="color: #0F9D58;">‚òÖ - Valor:</strong> Desacelera√ß√£o da tend√™ncia
                                </div>
                            </span>
                        </div>
                    </div>
                    <style>
                        .tooltip {
                            position: relative;
                            display: inline-block;
                            cursor: help;
                        }
                        .tooltip .tooltiptext {
                            visibility: hidden;
                            width: 260px;
                            background-color: #1a1a1a;
                            color: #fff;
                            text-align: left;
                            border-radius: 6px;
                            padding: 12px;
                            position: absolute;
                            z-index: 999;
                            bottom: 150%;
                            left: 50%;
                            margin-left: -130px;
                            opacity: 0;
                            transition: opacity 0.3s;
                            border: 1px solid #4CAF50;
                            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
                            font-size: 14px;
                        }
                        .tooltip:hover .tooltiptext {
                            visibility: visible;
                            opacity: 1;
                        }
                        .metric-box {
                            border: 1px solid #2d2d2d;
                            border-radius: 8px;
                            padding: 12px;
                            margin-bottom: 12px;
                            background: #0e1117;
                        }
                        .metric-label {
                            font-size: 16px;
                            color: #8b8b8b;
                            margin-bottom: 4px;
                        }
                        .metric-value {
                            font-size: 28px;
                            font-weight: 500;
                            margin: 8px 0;
                        }
                        .delta-container {
                            font-size: 14px;
                            margin-top: 6px;
                        }
                        .delta-line {
                            line-height: 1.4;
                            margin: 4px 0;
                        }
                        .taxa-line {
                            line-height: 1.4;
                            margin: 4px 0;
                        }
                    </style>
                """.strip(), unsafe_allow_html=True)

                try:
                    desmatamento = load_processed_data('prodes')
                    current_year_data = desmatamento[desmatamento['ano'] == selected_year]

                    # C√°lculo do ranking de biomas
                    biomas_ranking = current_year_data.groupby('bioma')['desmatado'] \
                        .sum() \
                        .sort_values(ascending=False) \
                        .reset_index()

                    for _, row in biomas_ranking.iterrows():
                        bioma = row['bioma']
                        area_desmatada = row['desmatado']
                        area_formatada = f"{area_desmatada:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

                        delta_content = ""
                        taxa_content = ""
                        show_taxa = False

                        if selected_year > min(desmatamento['ano']):
                            # Dados do ano anterior (varia√ß√£o anual)
                            area_anterior = desmatamento[
                                (desmatamento['ano'] == selected_year - 1) & 
                                (desmatamento['bioma'] == bioma)
                            ]['desmatado'].sum()

                            if area_anterior > 0:
                                # C√°lculo varia√ß√£o anual
                                diferenca = area_desmatada - area_anterior
                                variacao_anual = (diferenca / area_anterior) * 100
                                
                                # Formata√ß√£o BR e cores condicionais
                                dif_br = f"{diferenca:+,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                                var_br = f"{variacao_anual:+.1f}".replace(".", ",")
                                delta_color = "#FF4B4B" if diferenca > 0 else "#0F9D58"
                                
                                # C√°lculo da varia√ß√£o de tend√™ncia (ŒîTaxa)
                                if selected_year >= (min(desmatamento['ano']) + 2):
                                    area_2_anos_atras = desmatamento[
                                        (desmatamento['ano'] == selected_year - 2) & 
                                        (desmatamento['bioma'] == bioma)
                                    ]['desmatado'].sum()
                                    
                                    if area_2_anos_atras > 0:
                                        # C√°lculo da tend√™ncia
                                        desmatamento_periodo_anterior = area_anterior - area_2_anos_atras
                                        desmatamento_periodo_atual = diferenca
                                        
                                        if desmatamento_periodo_anterior != 0:
                                            variacao_taxa = (
                                                (desmatamento_periodo_atual - desmatamento_periodo_anterior) / 
                                                abs(desmatamento_periodo_anterior)
                                            ) * 100
                                            
                                            # Formata√ß√£o e cor condicional
                                            taxa_color = "#FF4B4B" if variacao_taxa > 0 else "#0F9D58"
                                            taxa_br = f"{variacao_taxa:+.1f}".replace(".", ",")
                                            taxa_content = f"""
                                            <div class="taxa-line">
                                                <span style="color: {taxa_color};">‚òÖ {taxa_br}% (vs. per√≠odo anterior)</span>
                                            </div>
                                            """
                                            show_taxa = True

                                delta_content = f"""
                                <div class="delta-container">
                                    <div class="delta-line">
                                        <span style="color: {delta_color};">‚ñ≤ {var_br}% ({dif_br} km¬≤) vs {selected_year - 1}</span>
                                    </div>
                                    {taxa_content if show_taxa else ''}
                                </div>
                                """.replace("\n", "").replace("  ", "")

                            elif area_anterior == 0 and area_desmatada > 0:
                                dif_br = f"{area_desmatada:+,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                                delta_content = f"""
                                <div class="delta-line" style="color: #FF4B4B;">
                                    ‚ö†Ô∏è Novo registro: {dif_br} km¬≤
                                </div>
                                """.replace("\n", "").replace("  ", "")

                        # Exibi√ß√£o da m√©trica
                        st.markdown(f"""
                        <div class="metric-box">
                            <div class="metric-label">{bioma}</div>
                            <div class="metric-value">{area_formatada} km¬≤</div>
                            {delta_content}
                        </div>
                        """.strip().replace("    ", ""), unsafe_allow_html=True)

                    # Total Geral (mesma l√≥gica aplicada)
                    total_desmatado = current_year_data['desmatado'].sum()
                    total_formatado = f"{total_desmatado:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                    
                    total_content = ""
                    if selected_year > min(desmatamento['ano']):
                        total_anterior = desmatamento[desmatamento['ano'] == selected_year - 1]['desmatado'].sum()
                        
                        if total_anterior > 0:
                            diferenca_total = total_desmatado - total_anterior
                            var_total = (diferenca_total / total_anterior) * 100
                            dif_br = f"{diferenca_total:+,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")
                            var_br = f"{var_total:+.1f}".replace(".", ",")
                            delta_color_total = "#FF4B4B" if diferenca_total > 0 else "#0F9D58"
                            
                            # C√°lculo ŒîTaxa para total
                            if selected_year >= (min(desmatamento['ano']) + 2):
                                total_2_anos_atras = desmatamento[
                                    desmatamento['ano'] == selected_year - 2
                                ]['desmatado'].sum()
                                
                                if total_2_anos_atras > 0:
                                    desmatamento_periodo_anterior_total = total_anterior - total_2_anos_atras
                                    desmatamento_periodo_atual_total = diferenca_total
                                    
                                    if desmatamento_periodo_anterior_total != 0:
                                        variacao_taxa_total = (
                                            (desmatamento_periodo_atual_total - desmatamento_periodo_anterior_total) / 
                                            abs(desmatamento_periodo_anterior_total)
                                        ) * 100
                                        
                                        taxa_color_total = "#FF4B4B" if variacao_taxa_total > 0 else "#0F9D58"
                                        taxa_br_total = f"{variacao_taxa_total:+.1f}".replace(".", ",")
                                        taxa_content_total = f"""
                                        <div class="taxa-line">
                                            <span style="color: {taxa_color_total};">‚òÖ {taxa_br_total}% (vs. per√≠odo anterior)</span>
                                        </div>
                                        """.replace("\n", "").replace("  ", "")
                            
                            total_content = f"""
                            <div class="delta-container">
                                <div class="delta-line">
                                    <span style="color: {delta_color_total};">‚ñ≤ {var_br}% ({dif_br} km¬≤) vs {selected_year - 1}</span>
                                </div>
                                {taxa_content_total if 'taxa_content_total' in locals() else ''}
                            </div>
                            """.replace("\n", "").replace("  ", "")

                    st.divider()
                    st.markdown(f"""
                    <div class="metric-box" style="border-color: #4CAF50;">
                        <div class="metric-label">TOTAL GERAL</div>
                        <div style="font-size: 32px; font-weight: 600;">{total_formatado} km¬≤</div>
                        {total_content}
                    </div>
                    """.strip().replace("    ", ""), unsafe_allow_html=True)

                except Exception as e:
                    st.error(f"Erro ao calcular m√©tricas: {str(e)}")
            
            # =============================================
            # SE√á√ÉO: Gr√°fico 100% Stacked + An√°lise
            # =============================================
            st.markdown("---")
            st.subheader("üìà Evolu√ß√£o Percentual por Bioma")
            
            # Container com 2 colunas (gr√°fico + insights)
            chart_col, insight_col = st.columns([3, 1])
            
            with chart_col:
                try:
                    # Renderiza o gr√°fico de √°rea 100% empilhado
                    stack_chart = maps.render_stacked_area_bioma()
                    if stack_chart:
                        stack_chart.update_layout(height=500)  # Aumente este valor conforme necess√°rio
                        st.plotly_chart(stack_chart, use_container_width=True)
                    else:
                        st.warning("Dados insuficientes para gerar o gr√°fico")
                        
                except Exception as e:
                    st.error(f"Erro ao gerar gr√°fico: {str(e)}")
            
            with insight_col:
                st.markdown("""
                    #### Principais Insights
                    - **Maior Taxa de Crescimento de √Årea Desmatada (2000-2023):** Mata Atl√¢ntica + 4,4%  |  Amaz√¥nia: + 3,92%  | Caatinga:  +0,97%
                    - **Tend√™ncia dominante**: A amaz√¥nia e o cerrado s√£o os biomas que concentram a maior parte do desmatamento do Brasil.
                    - **Mudan√ßas recentes**: O Cerrado, apesar de ter um crescimento menor em termos percentuais, j√° possui a maior √°rea desmatada entre os biomas, com 32,83% em 2023.
                    - **Bioma preservado**: O Pampa apresentou uma redu√ß√£o na √°rea desmatada, passando de 5,52% em 2000 para 3,68% em 2023.
                    """)
                
                # Bot√£o para detalhes (opcional)
                if st.button("üîç Metodologia", key="method_btn"):
                    st.info("""
                        Dados normalizados para porcentagem do total anual.  
                        Fontes: PRODES/INPE (2000-2023)  
                        Atualiza√ß√£o: Trimestral
                        """)

            # Linha divis√≥ria para pr√≥xima se√ß√£o
            st.markdown("---")
        
        # =============================================
    with tab2:
        with st.container():
            st.header("An√°lise Econ√¥mica-Ambiental")
            
            #seletor de per√≠odo para an√°lise econ√¥mica
            min_year = 2014
            max_year = 2021  # Atualizar conforme novos dados
            year_range = st.slider(
                "Selecione o per√≠odo para an√°lise econ√¥mica",
                min_value=min_year,
                max_value=max_year,
                value=(max(min_year, 2014), min(max_year, 2021))
            )
            
            # Chama as fun√ß√µes de an√°lise
            try:
                # Primeiro mostra o mapa e gr√°fico de culturas
                charts.display_economic_impact_map({
                    'start_year': year_range[0],
                    'end_year': year_range[1]
                })
                
                # Depois mostra a an√°lise de correla√ß√£o existente
                charts.display_agro_correlation({
                    'start_year': year_range[0],
                    'end_year': year_range[1]
                })
                
            except Exception as e:
                st.error(f"Erro na an√°lise econ√¥mica: {str(e)}")

    with tab3:
        policy_dashboard.show_policy_dashboard()  # Substitui a chamada antiga
        st.divider()

    with tab4:
        with st.container():
            st.header("Din√¢mica de Uso do Solo")
            
            # Container √∫nico para os gr√°ficos (100% width)
            try:
                landuse_viz.show_landuse_analysis({
                    'biomas': filters['landuse_filters'].get('biomas', []),
                    'estados': filters['landuse_filters'].get('estados', []),
                    'municipios': filters['landuse_filters'].get('municipios', []),
                    'ano_inicio': filters['landuse_filters'].get('ano_inicio', 2000),
                    'ano_fim': filters['landuse_filters'].get('ano_fim', 2023)
                })
            except Exception as e:
                st.error(f"Erro na an√°lise de cobertura: {str(e)}")
            
            # --- NOVA SE√á√ÉO DE PROJE√á√ÉO ---
            st.markdown("---")
            st.subheader("üîÆ Simula√ß√£o de Cen√°rios Futuros")
                   
            col1, col2 = st.columns(2)
            with col1:
                try:
                    estados_disponiveis = ProjectionService.load_projection_data()['Estado'].unique()
                    estado_selecionado = st.selectbox(
                        "Selecione o Estado",
                        options=sorted(estados_disponiveis),
                        index=0
                    )
                except Exception as e:
                    st.error(f"Erro ao carregar estados: {str(e)}")
                    st.stop()
            
            with col2:
                anos_projecao = st.slider(  # DEFINA AQUI A VARI√ÅVEL
                "Horizonte de Proje√ß√£o (anos)",
                min_value=1,
                max_value=5,
                value=5,
                key="proj_years",  # Chave √∫nica para o slider
                help="Per√≠odo para proje√ß√£o futura"
            )
            
            if st.button("‚ñ∂Ô∏è Gerar Proje√ß√£o", type="primary"):
                try:
                    # Mapeamento de siglas dos estados
                    SIGLAS_ESTADOS = {
                        'Acre': 'AC', 'Alagoas': 'AL', 'Amap√°': 'AP', 'Amazonas': 'AM',
                        'Bahia': 'BA', 'Cear√°': 'CE', 'Distrito Federal': 'DF', 'Esp√≠rito Santo': 'ES',
                        'Goi√°s': 'GO', 'Maranh√£o': 'MA', 'Mato Grosso': 'MT', 'Mato Grosso do Sul': 'MS',
                        'Minas Gerais': 'MG', 'Par√°': 'PA', 'Para√≠ba': 'PB', 'Paran√°': 'PR',
                        'Pernambuco': 'PE', 'Piau√≠': 'PI', 'Rio de Janeiro': 'RJ', 'Rio Grande do Norte': 'RN',
                        'Rio Grande do Sul': 'RS', 'Rond√¥nia': 'RO', 'Roraima': 'RR',
                        'Santa Catarina': 'SC', 'S√£o Paulo': 'SP', 'Sergipe': 'SE', 'Tocantins': 'TO'
                    }

                    # Carrega e prepara os dados
                    df_historico = ProjectionService.load_projection_data()
                    df_estado = df_historico[df_historico['Estado'] == estado_selecionado]
                    
                    if df_estado.empty:
                        raise ValueError(f"Nenhum dado dispon√≠vel para {estado_selecionado}")

                    ultimo_ano = df_estado.iloc[-1]
                    
                    # Carrega o modelo espec√≠fico do estado
                    sigla = SIGLAS_ESTADOS.get(estado_selecionado)
                    if not sigla:
                        raise ValueError(f"Sigla n√£o encontrada para o estado: {estado_selecionado}")
                        
                    model_path = Path(f"eco_guardian/models/saved_models/unified_prophet_v4_{sigla}.pkl")
                    forecaster = UnifiedForecaster.load_model(model_path)

                    # Prepara condi√ß√µes iniciais (mantendo todas as vari√°veis originais)
                    condicoes = {
                        'Estado': estado_selecionado,
                        'bioma': ultimo_ano['bioma'],
                        'area_fazenda_ha': float(ultimo_ano['area_fazenda_ha']),
                        'area_floresta_ha': float(ultimo_ano['area_floresta_ha']),
                        'y': float(ultimo_ano['y']),
                        'prop_floresta': float(ultimo_ano['area_floresta_ha'] / 
                                    (ultimo_ano['area_fazenda_ha'] + ultimo_ano['area_floresta_ha'])),
                        'last_year': int(df_estado['ds'].dt.year.iloc[-1]),
                        'estado_code': int(forecaster.encoder_estados.transform([estado_selecionado])[0])
                    }

                    # Gera a previs√£o
                    with st.spinner("Gerando proje√ß√£o..."):
                        forecast = forecaster.predict(condicoes, anos_projecao)
                        
                        # Armazena resultados na session state
                        st.session_state.ultima_projecao = {
                            'forecast': forecast,
                            'historical_data': df_estado,
                            'initial_conditions': condicoes
                        }

                    # Renderiza os resultados
                    ProjectionService.render_projection_results(
                        st.session_state.ultima_projecao,
                        anos_projecao
                    )

                except ValueError as e:
                    st.error(str(e))
                except FileNotFoundError:
                    st.error("Modelo de previs√£o n√£o encontrado!")
                except Exception as e:
                    st.error(f"Erro inesperado: {str(e)}")
                    st.error("Consulte os logs para mais detalhes.")

if __name__ == "__main__":
    main()